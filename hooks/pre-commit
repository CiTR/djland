#!/bin/sh
#
#Verify what is about to be committed

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

#A couple of things to normalize whitespace for the project and make commits easier
# Compile a list of changed files
FILES=`git diff --name-only HEAD^`

# Attempt to fix whitespace issues
for FILE in `egrep -l '(\s$| {1,3}\t)' $FILES`
do
	# Remove trailing whitespace
	(sed -i 's/[ 	]*$//' $FILE > /dev/null 2>&1 || sed -i '' -E 's/[ 	]*$//' $FILE)

	# Remove spaces before tabs
	(sed -i 's/ {1,3}	/	/' $FILE > /dev/null 2>&1 || sed -i '' -E 's/ {1,3}	/	/' $FILE)

	# Add to git
	git add $FILE
	echo "Automatically fixed whitespace in $FILE"
done

# Check for new lines at end of file, add if it is not there
for FILE in $FILES
do
	if ! tail -c1 $FILE | read _
	then    
		echo >> $FILE
		git add $FILE
		echo "Added new line to end of $FILE"
	fi
done
